{"version":3,"sources":["utils/useStats.js","components/Stats.js","components/CountrySelector.js","App.js","serviceWorker.js","index.js"],"names":["useStats","url","useState","stats","setStats","loading","setLoading","error","setError","useEffect","a","console","log","fetch","then","res","json","catch","err","data","fetchData","StatGrid","styled","div","StatBlock","Stats","confirmed","value","deaths","recovered","CountrySelect","select","CountrySelector","countries","selectedCountry","setSelectedCountry","className","onChange","e","target","Object","entries","map","country","selected","iso3","key","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0RAEe,SAASA,EAASC,GAAM,IAAD,EACVC,qBADU,mBAC7BC,EAD6B,KACtBC,EADsB,OAENF,oBAAS,GAFH,mBAE7BG,EAF6B,KAEpBC,EAFoB,OAGVJ,qBAHU,mBAG7BK,EAH6B,KAGtBC,EAHsB,KAmBpC,OAfAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,6DACEJ,GAAW,GACXE,IACAG,QAAQC,IAAI,iBAHd,SAIqBC,MAAMZ,GACtBa,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAC,GACLV,EAASU,MAPf,OAIQC,EAJR,OASEf,EAASe,GACTb,GAAW,GAVb,4CADc,uBAAC,WAAD,wBAadc,KACC,CAACnB,IACG,CACLE,QACAE,UACAE,S,iaCpBJ,IAAMc,EAAWC,IAAOC,IAAV,KAMRC,EAAYF,IAAOC,IAAV,KAWA,SAASE,EAAT,GAAyB,IAAD,EACHzB,EADG,EAAPC,KACtBE,EAD6B,EAC7BA,MAAOE,EADsB,EACtBA,QAASE,EADa,EACbA,MAExB,OADAI,QAAQC,IAAIT,EAAOE,EAASE,GACxBF,EAAgB,yCAChBE,EAAc,uCAEhB,kBAACc,EAAD,KACE,kBAACG,EAAD,KACE,0CACA,8BAAOrB,EAAMuB,UAAUC,QAEzB,kBAACH,EAAD,KACE,uCACA,8BAAOrB,EAAMyB,OAAOD,QAEtB,kBAACH,EAAD,KACE,0CACA,8BAAOrB,EAAM0B,UAAUF,S,0JCjC/B,IAAMG,EAAgBR,IAAOS,OAAV,KAOJ,SAASC,IAAmB,IAAD,EACKhC,EAC3C,4CADaiC,EADyB,EAChC9B,MAAkBE,EADc,EACdA,QAASE,EADK,EACLA,MADK,EAIML,mBAAS,OAJf,mBAIjCgC,EAJiC,KAIhBC,EAJgB,KAKxC,OAAI9B,EAAgB,yCAChBE,EAAc,uCAGhB,6BACE,gDAAsB2B,GACtB,kBAACJ,EAAD,CAAeM,UAAU,gBACvBC,SAAU,SAAAC,GACRH,EAAmBG,EAAEC,OAAOZ,SAG7Ba,OAAOC,QAAQR,EAAUA,WAAWS,KAAI,mCAAEC,EAAF,iBACvC,4BACEC,SAAUV,IAAoBD,EAAUY,KAAKF,GAC7CG,IAAKH,EACLhB,MAAOM,EAAUY,KAAKF,IAErBA,OAIP,kBAAClB,EAAD,CACExB,IAAG,mDAA8CiC,M,0RCjCzD,IAAMa,EAAcC,YAAH,KAmBFC,MAXf,WACE,OACE,6BACE,kBAACF,EAAD,MACA,yCACA,kBAACtB,EAAD,CAAOxB,IAAI,mCACX,kBAAC+B,EAAD,QCRckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAV,GACLI,QAAQJ,MAAMA,EAAMyD,c","file":"static/js/main.a35a9b15.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useStats(url) {\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError();\n      console.log('Fetching Data');\n      const data = await fetch(url)\n        .then(res => res.json())\n        .catch(err => {\n          setError(err);\n        });\n      setStats(data);\n      setLoading(false);\n    }\n    fetchData();\n  }, [url]);\n  return {\n    stats,\n    loading,\n    error,\n  };\n}","import React from 'react';\nimport styled from 'styled-components';\nimport useStats from '../utils/useStats';\n\nconst StatGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 1rem;\n  color: #e4fde1;\n`;\nconst StatBlock = styled.div`\n  background: #456990;\n  font-size: 2rem;\n  padding: 2rem;\n  border-radius: 2rem;\n  display: grid;\n  align-items: center;\n  justify-items: center;\n  text-align: center;\n`;\n\nexport default function Stats({ url }) {\n  const { stats, loading, error } = useStats(url);\n  console.log(stats, loading, error);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error...</p>;\n  return (\n    <StatGrid>\n      <StatBlock>\n        <h3>Confirmed:</h3>\n        <span>{stats.confirmed.value}</span>\n      </StatBlock>\n      <StatBlock>\n        <h3>Deaths:</h3>\n        <span>{stats.deaths.value}</span>\n      </StatBlock>\n      <StatBlock>\n        <h3>Recovered:</h3>\n        <span>{stats.recovered.value}</span>\n      </StatBlock>\n    </StatGrid>\n  );\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport useStats from '../utils/useStats';\nimport Stats from './Stats';\n\nconst CountrySelect = styled.select`\n\tfont-size: 18px;\n\tfont-weight: 600;\n\tbackground: #6B2737;\n\tcolor: #e4fde1\n`\n\nexport default function CountrySelector() {\n  const { stats: countries, loading, error } = useStats(\n    'https://covid19.mathdro.id/api/countries'\n  );\n  const [selectedCountry, setSelectedCountry] = useState('USA');\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error...</p>;\n\n  return (\n    <div>\n      <h2>Current Country: {selectedCountry}</h2>\n      <CountrySelect className=\"countrySelect\"\n        onChange={e => {\n          setSelectedCountry(e.target.value);\n        }}\n      >\n        {Object.entries(countries.countries).map(([country, code]) => (\n          <option\n            selected={selectedCountry === countries.iso3[country]}\n            key={country}\n            value={countries.iso3[country]}\n          >\n            {country}\n          </option>\n        ))}\n      </CountrySelect>\n      <Stats\n        url={`https://covid19.mathdro.id/api/countries/${selectedCountry}`}\n      ></Stats>\n    </div>\n  );\n}","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport Stats from './components/Stats';\nimport CountrySelector from './components/CountrySelector';\nimport './App.css';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    background: #114b5f;\n    color: #e4fde1;\n  }\n`;\n\nfunction App() {\n  return (\n    <div>\n      <GlobalStyle />\n      <h2>Worldwide</h2>\n      <Stats url=\"https://covid19.mathdro.id/api\"></Stats>\n      <CountrySelector></CountrySelector>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}